<?xml version="1.0" encoding="UTF-8"?>
<project name="Piggy" default="deploy">
	<property environment="env"/>
	<property name="JAVA_HOME" value="${env.JAVA_HOME}"/>
	<!--		指定配置文件		-->
	<property file="default.properties"/>
	<property file="local.properties"/>
	<property name="build.debug" value="${debug_flag}"/>
	<property name="build.encrypt.debug" value="${debug_encrypt_flag}"/>

	<!--		定义工具目录		-->
	<property name="sdk.dir" value="${sdk-dir}"/>
	<property name="android.tools.dir" value="${sdk.dir}/tools"/>
	<property name="android.platformtools.dir" value="${sdk.dir}/build-tools/android-4.2.2"/>
	<property name="android.platforms.dir" value="${sdk.dir}/platforms/${target}"/>

	<property name="android.tools.absolute.dir" location="${android.tools.dir}"/>
	<property name="android.platformtools.absolute.dir" location="${android.platformtools.dir}"/>
	<property name="android.platforms.absolute.dir" location="${android.platforms.dir}"/>

	<!--		定义工具		
	<property name="verbose" value="false" />-->
	<condition property="exe" value=".exe" else="">
		<os family="windows"/>
	</condition>
	<property name="jar.proguard" value="${proguard-jar}"/>
	<property name="jar.android" value="${android.platforms.dir}/android.jar"/>
	<property name="tools.dx" value="${android.platformtools.dir}/dx.bat"/>
	<property name="tools.apkbuilder" value="${android.tools.dir}/apkbuilder.bat"/>
	<property name="tools.adb" value="${android.tools.dir}/adb${exe}"/>
	<property name="tools.zipalign" value="${android.tools.dir}/zipalign${exe}"/>
	<property name="tools.aapt" value="${android.platformtools.dir}/aapt${exe}"/>
	<property name="tools.aidl" value="${android.platformtools.dir}/aidl${exe}"/>
	<property name="tools.jarsigner" value="${JAVA_HOME}/bin/jarsigner${exe}"/>

	<!--		定义源代码及资源等输入目录		-->
	<property name="in.source.dir" value="${src-dir}"/>
	<property name="in.resource.dir" value="${res-dir}"/>
	<property name="in.asset.dir" value="${assets-dir}"/>
	<property name="in.source.absolute.dir" location="${in.source.dir}"/>
	<property name="in.resource.absolute.dir" location="${in.resource.dir}"/>
	<property name="in.asset.absolute.dir" location="${in.asset.dir}"/>

	<!--		第三方工具库文件目录		-->
	<property name="in.external.libs.dir" value="libs"/>
	<property name="in.native.libs.dir" value="libs"/>
	<property name="in.external.libs.absolute.dir" location="${in.external.libs.dir}"/>
	<property name="in.native.libs.absolute.dir" location="${in.native.libs.dir}"/>

	<!--		输入文件		-->
	<property name="in.manifest.file" value="${manifest-file}"/>
	<property name="in.initconfig.file" value="${init_config_file}"/>
	<property name="in.android.aidl.file" value="${android.platforms.dir}/framework.aidl"/>
	<property name="in.manifest.absolute.file" location="${in.manifest.file}"/>
	<property name="in.android.aidl.absolute.file" location="${in.android.aidl.file}"/>

	<!--		输出文件目录	-->
	<property name="out.gen.dir" value="gen"/>
	<property name="out.dir" value="bin"/>
	<property name="out.classes.dir" value="${out.dir}/classes"/>

	<property name="out.gen.absolute.dir" location="${out.gen.dir}"/>
	<property name="out.absolute.dir" location="${out.dir}"/>
	<property name="out.classes.absolute.dir" location="${out.classes.dir}"/>
	<property name="release.absolute.dir" location="${release-dir}"/>

	<!--		定义输出文件			-->
	<property name="out.dex.file" value="${ant.project.name}-classes.dex"/>
	<property name="out.resource.package.file" value="${ant.project.name}-resource.apk"/>
	<property name="out.unsigned.package.file" value="${ant.project.name}-unsigned.apk"/>
	<property name="out.signed.package.file" value="${ant.project.name}-signed.apk"/>
	<property name="out.aligned.package.file" value="${ant.project.name}-aligned.apk"/>

	<property name="out.dex.absolute.file" location="${out.dir}/${out.dex.file}"/>
	<property name="out.resource.package.absolute.file" location="${out.dir}/${out.resource.package.file}"/>
	<property name="out.unsigned.package.absolute.file" location="${out.dir}/${out.unsigned.package.file}"/>
	<property name="out.signed.package.absolute.file" location="${out.dir}/${out.signed.package.file}"/>
	<property name="out.aligned.package.absolute.file" location="${out.dir}/${out.aligned.package.file}"/>

	<!-- 用于循环 -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${ant-contrib}"/>

    <target name="idebug"  description="description">
    	<var name="build.debug" unset="true"/>
    	<property name="build.debug" value="true"/>
    	<echo>debugflag ${build.debug}</echo>
    	<antcall target="deploy"/>
    </target>
	
	<target name="loadfilelist" depends="startclean">
		<loadfile property="market_channels" srcFile="${market_channelsfile}" encoding="UTF-8"/>
	</target>

	<target name="deploy" depends="loadfilelist">
		<echo>debugflag ${build.debug}</echo>
		<foreach target="mytest" list="${market_channels}" param="every_channels" delimiter=";">
		</foreach>
	</target>

	<target name="mytest">
		<echo>debugflag mytest start</echo>
		<echo>debugflag ${build.debug}</echo>
		<antcall target="release"/>
		<echo>debugflag mytest end</echo>
		<!-- 		<antcall target="modify_manifest" /> -->
	</target>

	<target name="modify_manifest">
			<!-- make sure remove debug url-->
		<echo>debugflag ${build.debug}</echo>
		<replaceregexp flags="g" byline="false" encoding="utf-8" file="${in.initconfig.file}">
			<regexp pattern="&lt;bool name=&quot;SECRET_DEBUG_URL&quot;&gt;(.*)&lt;/bool&gt;"/>
			<substitution expression="&lt;bool name=&quot;SECRET_DEBUG_URL&quot;&gt;${build.debug}&lt;/bool&gt;"/>
		</replaceregexp>
		<replaceregexp flags="g" byline="false" encoding="utf-8" file="${in.initconfig.file}">
			<regexp pattern="&lt;bool name=&quot;SECRET_DEBUG_ENCRYPT&quot;&gt;(.*)&lt;/bool&gt;"/>
			<substitution expression="&lt;bool name=&quot;SECRET_DEBUG_ENCRYPT&quot;&gt;${build.encrypt.debug}&lt;/bool&gt;"/>
		</replaceregexp>
		<propertyregex property="channeId" input="${every_channels}" regexp="(.*)@" select="\1"/>
		<propertyregex property="UMENG_CHANNEL" input="${every_channels}" regexp="@(.*)=" select="\1"/>
		<propertyregex property="UMENG_CHANNEL_NAME" input="${every_channels}" regexp="=(.*):" select="\1"/>
		<propertyregex property="T_CHANNEL" input="${every_channels}" regexp=":(.*)#" select="\1"/>
		<propertyregex property="T_ACTION" input="${every_channels}" regexp="#(.*)" select="\1"/>

		<replaceregexp flags="g" byline="false" encoding="utf-8" file="${in.initconfig.file}">
			<regexp pattern="&lt;string name=&quot;UMENG_CHANNEL&quot;&gt;(.*)&lt;/string&gt;"/>
			<substitution expression="&lt;string name=&quot;UMENG_CHANNEL&quot;&gt;${UMENG_CHANNEL}&lt;/string&gt;"/>
		</replaceregexp>
		<replaceregexp flags="g" byline="false" encoding="utf-8" file="${in.initconfig.file}">
			<regexp pattern="&lt;string name=&quot;channeId&quot;&gt;(.*)&lt;/string&gt;"/>
			<substitution expression="&lt;string name=&quot;channeId&quot;&gt;${channeId}&lt;/string&gt;"/>
		</replaceregexp>
		<replaceregexp flags="g" byline="false" encoding="utf-8" file="${in.initconfig.file}">
			<regexp pattern="&lt;string name=&quot;TransactionCoopId&quot;&gt;(.*)&lt;/string&gt;"/>
			<substitution expression="&lt;string name=&quot;TransactionCoopId&quot;&gt;${T_CHANNEL}&lt;/string&gt;"/>
		</replaceregexp>
		<replaceregexp flags="g" byline="false" encoding="utf-8" file="${in.initconfig.file}">
			<regexp pattern="&lt;string name=&quot;TransactionActionId&quot;&gt;(.*)&lt;/string&gt;"/>
			<substitution expression="&lt;string name=&quot;TransactionActionId&quot;&gt;${T_ACTION}&lt;/string&gt;"/>
		</replaceregexp>



		<property name="release.package.file" value="Piggy_${UMENG_CHANNEL_NAME}_${app_version}.apk"/>
		<property name="release.package.absolute.file" location="${release.absolute.dir}/${release.package.file}"/>
		<echo>${channeId}</echo>
		<echo>${UMENG_CHANNEL_NAME}</echo>
		<echo>${UMENG_CHANNEL}</echo>
		<echo>${T_CHANNEL}</echo>
		<echo>${T_ACTION}</echo>
		<echo>${release.package.file}</echo>
	</target>

	<!-- 清理release文件夹 -->
	<target name="startclean">
		<mkdir dir="${release.absolute.dir}"/>
		<delete verbose="true" includeemptydirs="true">
			<fileset dir="${release.absolute.dir}">
				<include name="**/*"/>
			</fileset>
		</delete>
	</target>

	<target name="-clean" depends="modify_manifest">
		<echo>Creating output directories if needed...</echo>
		<delete dir="${out.absolute.dir}"/>
		<delete dir="${out.gen.absolute.dir}"/>
	</target>

	<target name="-dirs" depends="-clean">
		<echo>Creating output directories if needed...</echo>
		<mkdir dir="${in.resource.absolute.dir}"/>
		<mkdir dir="${in.external.libs.absolute.dir}"/>
		<mkdir dir="${out.gen.absolute.dir}"/>
		<mkdir dir="${out.absolute.dir}"/>
		<mkdir dir="${out.classes.absolute.dir}"/>
	</target>

	<!--
		第一步 生成R.java类文件：。
	-->
	<target name="-resource-src" depends="-dirs">
		<echo>Generating R.java / Manifest.java from the resources...</echo>
		<exec executable="${tools.aapt}" failonerror="false">
			<arg value="package"/>
			<arg value="-m"/>
			<arg value="-J"/>
			<arg value="${out.gen.absolute.dir}"/>
			<arg value="-M"/>
			<arg value="${in.manifest.absolute.file}"/>
			<arg value="-I"/>
			<arg value="${jar.android}"/>
			<arg value="-S"/>
			<arg value="${in.resource.absolute.dir}"/>
			<arg value="-S"/>
			<arg value="${android.library.reference.1}/${res-dir}"/>
			<arg value="-S"/>
			<arg value="${android.library.reference.2}/${res-dir}"/>
			<arg value="-S"/>
			<arg value="${android.library.reference.3}/${res-dir}"/>
			<arg value="--extra-packages"/>
			<arg value="${android.library.packagename.1}:${android.library.packagename.2}:${android.library.packagename.3}"/>
			<arg value="-m"/>
			<arg value="--auto-add-overlay"/>
		</exec>
	</target>

	<!--
		第二步 将.aidl文件生成.java类文件：
	-->
	<target name="-aidl" depends="-dirs">
		<echo>Compiling aidl files into Java classes...</echo>
		<apply executable="${tools.aidl}" failonerror="true">
			<arg value="-p${in.android.aidl.file}"/>
			<arg value="-I${in.source.absolute.dir}"/>
			<arg value="-o${out.gen.absolute.dir}"/>
			<fileset dir="${in.source.absolute.dir}">
				<include name="**/*.aidl"/>
			</fileset>
		</apply>
	</target>

	<!--
		第三步 编译.java类文件生成class文件： 
		 -->
	<target name="compile" depends="-resource-src, -aidl">
		<echo>Compiles project's .java files into .class files</echo>
		<javac encoding="utf-8" target="1.6" debug="false" includejavaruntime="false" destdir="${out.classes.absolute.dir}" bootclasspath="${jar.android}">
			<src path="${src-dir}"/>
			<src path="${out.gen.dir}"/>
			<src path="${android.library.reference.1}/${src-dir}"/>
			<src path="${android.library.reference.2}/${src-dir}"/>
			<src path="${android.library.reference.3}/${src-dir}"/>
			<classpath>
				<fileset dir="${in.external.libs.absolute.dir}" includes="*.jar"/>
				<fileset dir="${android.library.reference.1}/${in.external.libs.dir}" includes="*.jar"/>
				<fileset dir="${android.library.reference.2}/${in.external.libs.dir}" includes="*.jar"/>
				<fileset dir="${sdk-dir}\tools\support" includes="*.jar"/>
			</classpath>
		</javac>
	</target>

	<!--Execute proguard class flies-->
	<target name="optimize" depends="compile">
		<echo>optimize classes are put to "${out.absolute.dir}" .</echo>
		<jar basedir="${out.classes.absolute.dir}" destfile="${out.absolute.dir}/temp.jar"/>
		<taskdef resource="proguard/ant/task.properties" classpath="${jar.proguard}"/>
		<proguard>
			-injars ${out.absolute.dir}/temp.jar
			-outjars ${out.absolute.dir}/optimized.jar
			-libraryjars ${jar.android}
			-optimizationpasses 5
			-include proguard.cfg
		</proguard>
		<delete file="${out.absolute.dir}/temp.jar"/>
		<delete dir="${out.classes.dir}" failonerror="false"/>
		<mkdir dir="${out.classes.dir}"/>
		<unzip src="${out.absolute.dir}/optimized.jar" dest="${out.classes.absolute.dir}"/>
		<delete file="${out.absolute.dir}/optimized.jar"/>
	</target>

	<!--
		第四步 将class文件打包生成classes.dex文件： optimize
	-->
	<target name="dex" depends="optimize">
		<echo>Converting compiled files and external libraries into ${out.absolute.dir}/${out.dex.file} ...</echo>
		<apply executable="${tools.dx}" failonerror="true" parallel="true">
			<arg value="--dex"/>
			<arg value="--output=${out.dex.absolute.file}"/>
			<arg path="${out.classes.absolute.dir}"/>
			<fileset dir="${in.external.libs.absolute.dir}" includes="*.jar"/>
			<fileset dir="${android.library.reference.2}/${in.external.libs.dir}" includes="*jar" />
			<!--<fileset dir="${android.library.reference.3}/${in.external.libs.dir}" includes="*.jar" />-->
		</apply>
		<delete dir="${out.classes.absolute.dir}"/>
	</target>

	<!--
		第五步 打包资源文件
	-->
	<target name="package-resource">
		<echo>Packaging resources and assets ${out.resource.package.absolute.file} ...</echo>
		<exec executable="${tools.aapt}" failonerror="false">
			<arg value="package"/>
			<arg value="-f"/>
			<arg value="-M"/>
			<arg value="${in.manifest.file}"/>
			<arg value="-S"/>
			<arg value="${in.resource.absolute.dir}"/>
			<arg value="-A"/>
			<arg value="${in.asset.absolute.dir}"/>
			<arg value="-I"/>
			<arg value="${jar.android}"/>
			<arg value="-F"/>
			<arg value="${out.resource.package.absolute.file}"/>
			<arg value="-S"/>
			<arg value="${android.library.reference.1}/${res-dir}"/>
			<arg value="-S"/>
			<arg value="${android.library.reference.2}/${res-dir}"/>
			<arg value="-S"/>
			<arg value="${android.library.reference.3}/${res-dir}"/>
			<arg value="-m"/>
			<arg value="--auto-add-overlay"/>
		</exec>
	</target>

	<!--
		第六步 生成未签名的apk安装文件：
		Eclipse中自动生成debug签名文件存放在bin目录中，ant和命令行使用android SDK提供的apkbuilder.bat命令脚本生成未签名的apk安装文件。 
	-->
	<!-- Package the application without signing it.  This allows for the application to be signed later with an official publishing key. -->
	<target name="package" depends="dex, package-resource">
		<echo>Packaging ${out.unsigned.package.absolute.file} for release...</echo>
		<exec executable="${tools.apkbuilder}" failonerror="true">
			<arg value="${out.unsigned.package.absolute.file}"/>
			<arg value="-u"/>
			<arg value="-z"/>
			<arg value="${out.resource.package.absolute.file}"/>
			<arg value="-f"/>
			<arg value="${out.dex.absolute.file}"/>
			<arg value="-rf"/>
			<arg value="${in.source.absolute.dir}"/>
			<arg value="-rj"/>
			<arg value="${in.external.libs.absolute.dir}"/>
			<!--打包so文件-->
			<arg value="-nf"/>
			<arg value="${in.external.libs.absolute.dir}"/>
		</exec>
		<echo>It will need to be signed with jarsigner before being published.</echo>
		<delete file="${out.resource.package.absolute.file}"/>
		<delete file="${out.dex.absolute.file}"/>
	</target>

	<!--
		第七步 对未签名的apk进行签名生成签名后的android文件：
	-->
	<target name="jarsigner" depends="package">
		<echo>Packaging ${out.unsigned.package.absolute.file} for release...</echo>
		<exec executable="${tools.jarsigner}" failonerror="true">
			<arg value="-keystore"/>
			<arg value="${keystore}"/>
			<arg value="-storepass"/>
			<arg value="${password}"/>
			<arg value="-keypass"/>
			<arg value="${password}"/>
			<arg value="-signedjar"/>
			<arg value="${out.signed.package.absolute.file}"/>
			<arg value="${out.unsigned.package.absolute.file}"/>
			<arg value="${keyalias}"/>
			<arg value="-digestalg"/>
			<arg value="SHA1"/>
			<arg value="-sigalg"/>
			<arg value="MD5withRSA"/>
		</exec>
		<delete file="${out.unsigned.package.absolute.file}"/>
	</target>

	<!--
		第七步 签名的文件进行字节对齐；
	-->
	<target name="zipalign" depends="jarsigner">
		<echo>Zipalign ${out.aligned.package.absolute.file} for release...</echo>
		<exec executable="${tools.zipalign}">
			<arg value="-f"/>
			<arg value="-v"/>
			<arg value="4"/>
			<arg value="${out.signed.package.absolute.file}"/>
			<arg value="${out.aligned.package.absolute.file}"/>
		</exec>
		<delete file="${out.signed.package.absolute.file}"/>
	</target>

	<!--
		第八步 签名的文件进行字节对齐；
	-->
	<target name="release" depends="zipalign">
		<echo>debugflag ${build.debug}</echo>
		<copy tofile="${release.package.absolute.file}">
			<fileset dir="${out.absolute.dir}" includes="${out.aligned.package.file}"/>
		</copy>
		<delete file="${out.aligned.package.absolute.file}"/>
	</target>


</project>
